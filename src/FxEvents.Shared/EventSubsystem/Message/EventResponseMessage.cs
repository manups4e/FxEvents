using FxEvents.Shared.EventSubsystem;
using FxEvents.Shared.Snowflakes;
using System;
using System.IO;

namespace FxEvents.Shared.Message
{
    public class EventResponseMessage : IMessage
    {
        public Snowflake Id { get; set; }
        public string Endpoint { get; set; }
        public string? Signature { get; set; }
        public byte[]? Data { get; set; }

        public EventResponseMessage() { }
        public EventResponseMessage(Snowflake id, string endpoint, string? signature, byte[]? data)
        {
            Id = id;
            Endpoint = endpoint;
            Signature = signature;
            Data = data;
        }
        public EventResponseMessage(BinaryReader reader)
        {
            UnpackSerializedBytes(reader);
        }
        public void PackSerializedBytes(BinaryWriter writer)
        {
            // Auto-generated by the Serialization Generator. Created by Lucas mantained by Manups4e.
            Id.PackSerializedBytes(writer);
            if (Endpoint is default(System.String))
            {
                throw new Exception("Member 'Endpoint' is a primitive and has no value (null). If this is not an issue, please declare it as nullable.");
            }
            writer.Write(Endpoint);
            writer.Write(Signature is not null);
            if (Signature is not null)
            {
                if (Signature is default(System.String))
                {
                    throw new Exception("Member 'Signature' is a primitive and has no value (null). If this is not an issue, please declare it as nullable.");
                }
                writer.Write(Signature);
            }
            writer.Write(Data is not null);
            if (Data is not null)
            {
                writer.Write(Data.Length);
                writer.Write(Data);
            }
        }
        public void UnpackSerializedBytes(BinaryReader reader)
        {
            // Auto-generated by the Serialization Generator. Created by Lucas mantained by Manups4e.

            Id = new Snowflake(reader);
            Endpoint = reader.ReadString();
            if (reader.ReadBoolean())
            {
                Signature = reader.ReadString();
            }
            if (reader.ReadBoolean())
            {
                int dataLength = reader.ReadInt32();
                Data = reader.ReadBytes(dataLength);
            }
        }

        public override string ToString() => Id.ToString();
    }
}